from defaults.flatirons_site import get_default, update_site_default
from hybrid.scenario import run_default_scenario
from hybrid.storage import storage
from hybrid.systems_behavior import get_system_behavior_fx
from parameters.parameter_data import get_input_output_data
import matplotlib.pyplot as plt
import numpy as np

import PySAM.StandAloneBattery as Battery

def size_li_ion_battery(input_dict):
    """
    All efficiencies and rates in percentages, 0-100.

    Inverter efficiency depends on which inverter model is being used, `inverter_model`.

    :param input_dict:
        batt_chem: int
            Lithium-ion (1) or Lead-Acid (0)
        batt_Qfull: float, Ah
            capacity of single cell
        batt_Vnom_default: float, V
            voltage of single cell

        Required only if batt_chem is False:
            LeadAcid_q10: float 0-100, Ah
                10 hour discharge rate
            LeadAcid_q20: float 0-100, Ah
                20 hour discharge rate
            LeadAcid_tn: int, hour
                hour for custom hour discharge rate
            LeadAcid_qn: float 0-100, Ah
                n-hour discharge rate

        batt_ac_or_dc: bool
            True if ac-connected
        desired_power: float, kW
            power of the battery
        desired_capacity: float, kWh
            capacity
        desired_voltage: float, V
            voltage
        size_by_ac_not_dc: bool, default False
            True for sizing battery as kWAC and kWhAC
        batt_dc_ac_efficiency: float 0-100, required only if size_by_ac_not_dc is True
            AC to DC power in conversion
        inverter_eff: float 0-100, required only if batt_ac_or_dc is False
            AC to DC power from inverter
        batt_dc_dc_efficiency: float 0-100, optional
            DC to DC power conversion in battery management system

    :return: output_dict:
        voltage: float, V
            computed
        power: float
            computed
        batt_computed_bank_capacity: float
            computed
        batt_computed_series: int
            number of cells connected in series
        batt_computed_strings: int
            number of strings connected in parallel
        time_capacity: float 0-1

        batt_current_charge_max: float, A

        batt_current_discharge_max: float, A

        batt_power_charge_max_kwac: float, kWAC

        batt_power_discharge_max_kwac: float, kWAC

        batt_power_charge_max_kwdc: float, kWDC

        batt_power_discharge_max_kwdc: float, kWDC

        only if batt_chem is False:
            LeadAcid_q10_computed: float 0-100, Ah

            LeadAcid_q20_computed: float 0-100, Ah

            LeadAcid_qn_computed: float 0-100, Ah
    """

    def check_keys(keys):
        for k in keys:
            if k not in input_dict:
                raise ValueError

    check_keys(('size_by_ac_not_dc', 'batt_ac_or_dc', 'desired_power', 'desired_capacity'))
    desired_power = input_dict['desired_power']
    desired_capacity = input_dict['desired_capacity']
    ac_connected = bool(input_dict['batt_ac_or_dc'])
    size_by_ac_not_dc = bool(input_dict['size_by_ac_not_dc'])

    # convert all the sizing values to DC via conversion efficiencies
    if ac_connected:
        for key in ('size_by_ac_not_dc', 'batt_dc_ac_efficiency'):
            if key not in input_dict or input_dict[key] > 1:
                raise ValueError
        batt_dc_ac_efficiency = input_dict['batt_dc_ac_efficiency'] * 0.01
        if size_by_ac_not_dc:
            desired_capacity /= batt_dc_ac_efficiency
            desired_power /= batt_dc_ac_efficiency
    else:
        if 'inverter_eff' not in input_dict:
            raise ValueError
        inv_eff = input_dict['inverter_eff'] * 0.01
        if inv_eff > 1:
            raise ValueError
        if 'batt_dc_dc_efficiency' in input_dict:
            batt_dc_dc_efficiency = input_dict['batt_dc_dc_efficiency'] * 0.01
            inv_eff *= batt_dc_dc_efficiency
        if size_by_ac_not_dc:
            desired_capacity /= inv_eff
            desired_power /= inv_eff

    check_keys(('batt_Qfull', 'batt_Vnom_default', 'desired_voltage'))

    batt_Qfull = input_dict['batt_Qfull']
    batt_Vnom_default = input_dict['batt_Vnom_default']
    desired_voltage = input_dict['desired_voltage']

    max_rate_discharge = desired_power / desired_capacity
    max_rate_charge = max_rate_discharge
    num_series = np.ceil(desired_voltage / batt_Vnom_default)
    num_strings = round(desired_capacity * 1000 / (batt_Qfull * batt_Vnom_default * num_series))

    computed_voltage = batt_Vnom_default * num_series
    batt_capacity = batt_Qfull * computed_voltage * num_strings * 0.001
    batt_power = batt_capacity * max_rate_discharge

    output_dict = dict()
    output_dict['voltage'] = computed_voltage
    output_dict['power'] = batt_capacity * max_rate_discharge
    output_dict['batt_computed_bank_capacity'] = batt_capacity
    output_dict['batt_computed_series'] = num_series
    output_dict['batt_computed_strings'] = num_strings
    output_dict['time_capacity'] = batt_capacity / batt_power
    output_dict['batt_current_charge_max'] = batt_Qfull * num_strings * max_rate_charge
    output_dict['batt_current_discharge_max'] = batt_Qfull * num_strings * max_rate_discharge
    output_dict['batt_power_discharge_max_kwdc'] = batt_power
    output_dict['batt_power_charge_max_kwdc'] = batt_capacity * max_rate_charge

    # Now update AC power limit
    if ac_connected:
        if size_by_ac_not_dc:
            batt_bank_power_discharge_ac = desired_power
            batt_bank_power_charge_ac = desired_power
        else:
            batt_bank_power_discharge_ac = desired_power * batt_dc_ac_efficiency
            batt_bank_power_charge_ac =  desired_power / batt_dc_ac_efficiency
    else:
        if size_by_ac_not_dc:
            batt_bank_power_discharge_ac = desired_power
            batt_bank_power_charge_ac = desired_power
        else:
            batt_bank_power_discharge_ac = desired_power * inv_eff
            batt_bank_power_charge_ac = desired_power / inv_eff

    output_dict['batt_power_discharge_max_kwac'] = batt_bank_power_discharge_ac
    output_dict['batt_power_charge_max_kwac'] = batt_bank_power_charge_ac

    batt_chem = True
    if 'batt_chem' in input_dict:
        batt_chem = bool(input_dict['batt_chem'])

    if batt_chem:
        check_keys(('LeadAcid_q10', 'LeadAcid_q20', 'LeadAcid_qn', 'LeadAcid_tn'))
        q10_computed = num_strings * input_dict['LeadAcid_q10'] * batt_Qfull * 0.01
        q20_computed = num_strings * input_dict['LeadAcid_q20'] * batt_Qfull * 0.01
        qn_computed = num_strings * input_dict['LeadAcid_qn'] * batt_Qfull * 0.01

        output_dict['LeadAcid_q10_computed'] = q10_computed
        output_dict['LeadAcid_q20_computed'] = q20_computed
        output_dict['LeadAcid_qn_computed'] = qn_computed

    return output_dict


def battery_model_sizing(model: Battery, desired_power, desired_capacity, desired_voltage):
    """
    Modifies model with new sizing

    :param model: PySAM.StandAloneBattery model
    :param desired_power: float
        kWAC if AC-connected, kWDC otherwise
    :param desired_capacity: float
        kWhAC if AC-connected, kWhDC otherwise
    :param desired_voltage: float
        volts
    :return: output_dictionary of sizing parameters
    """
    input_dict = dict()

    chem = int(model.Battery.batt_chem)

    input_names = ('batt_chem', 'batt_Qfull', 'batt_Vnom_default', 'batt_ac_or_dc', 
                   'batt_dc_ac_efficiency', 'batt_dc_dc_efficiency')

    if chem == 0:
        input_names += ('LeadAcid_q10', 'LeadAcid_q20', 'LeadAcid_qn')

    for name in input_names:
        input_dict[name] = model.Battery.__getattribute__(name)

    input_dict['desired_power'] = desired_power
    input_dict['desired_capacity'] = desired_capacity
    input_dict['desired_voltage'] = desired_voltage
    input_dict['size_by_ac_not_dc'] = input_dict['batt_ac_or_dc']

    inv_model = int(model.Common.inverter_model)
    if inv_model == 0:
        input_dict['inverter_eff'] = model.Battery.inv_snl_eff_cec
    elif inv_model == 1:
        input_dict['inverter_eff'] = model.Battery.inv_ds_eff
    elif inv_model == 2:
        input_dict['inverter_eff'] = model.Battery.inv_pd_eff
    elif inv_model == 3:
        input_dict['inverter_eff'] = model.Battery.inv_cec_cg_eff_cec
    else:
        raise ValueError

    output_dict = size_li_ion_battery(input_dict)

    computed_inputs = ('batt_computed_bank_capacity', 'batt_computed_series', 'batt_computed_strings',
                       'batt_current_charge_max', 'batt_current_discharge_max', 'batt_power_charge_max_kwac',
                       'batt_power_discharge_max_kwac' 'batt_power_charge_max_kwdc', 'batt_power_discharge_max_kwdc')

    if input_dict['batt_chem'] == 0:
        computed_inputs += ('LeadAcid_q10_computed', 'LeadAcid_q20_computed', 'LeadAcid_qn_computed')

    for name in computed_inputs:
        model.Battery.__setattr__(name, output_dict[name])

    return output_dict



# Check https://nrel-pysam.readthedocs.io/en/latest/modules/StandAloneBattery.html for details
# This is the default PV plus single owner case, with a battery enabled, and using
# A fixed PPA price of $.10/kWh, and using the default hourly TOD factors.
def test_storage():
    plot_dispatch = False
    technologies = ['Solar', 'Generic', 'Battery']
    systems = get_system_behavior_fx(technologies)  # defines which models get run in each system
    defaults, site = get_default(technologies)
    site['lat'] = 33.450495
    site['lon'] = -111.983688
    site['elev'] = 358
    site['tz'] = -7
    site['year'] = '2012'
    defaults = update_site_default(defaults, site)
    defaults['Battery']['StandAloneBattery']['Battery']['en_batt'] = 1

    # Modify battery size


    # Automated front of meter with energy market price signal
    defaults['Battery']['StandAloneBattery']['Battery']['batt_meter_position'] = 1
    defaults['Battery']['StandAloneBattery']['Battery']['batt_dispatch_choice'] = 0
    defaults['Battery']['StandAloneBattery']['Battery']['batt_dispatch_auto_can_charge'] = 1
    defaults['Battery']['StandAloneBattery']['Battery']['batt_dispatch_auto_can_gridcharge'] = 0
    defaults['Battery']['StandAloneBattery']['Battery']['batt_cycle_cost_choice'] = 1
    defaults['Battery']['StandAloneBattery']['Battery']['batt_cycle_cost'] = 0.005

    # multiplier on the PPA price, that applies to selling energy during the hour, e.g, 0.7 for $.05/kWh = $0.035 /kWh
    tod_factors = [0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1.2,1.2,1.2,1.2,2.064,2.064,2.064,2.064,2.064,2.064,1.2,1.2,1.2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.7,0.8,0.8,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,0.8,0.8,0.8]
    for tech in defaults:
        defaults[tech]['Singleowner']['SolutionMode']['ppa_soln_mode'] = 1 # input PPA price
        defaults[tech]['Singleowner']['PPAPrice']['ppa_price_input'] = 0.1 # $/kWh
        defaults[tech]['Singleowner']['TimeOfDelivery']['ppa_multiplier_model'] = 1 # use the TOD factors
        defaults[tech]['Singleowner']['TimeOfDelivery']['dispatch_factors_ts'] = tuple(tod_factors)

    input_data, output_data = get_input_output_data(systems)

    scenario, outputs = run_default_scenario(defaults=defaults,
                                             input_info=input_data,
                                             output_info=output_data,
                                             run_systems=systems)


    assert round(outputs['Battery']['average_battery_roundtrip_efficiency']) == 80
    assert len(outputs['Battery']['gen']) == 8760

    batt_power = outputs['Battery']['batt_power']
    sell_rate = outputs['Battery']['market_sell_rate_series_yr1']


    if plot_dispatch:
        day_start = 157
        day_end = 159

        dict_plot = dict()
        dict_plot['Time (hour of year)'] = range(day_start * 24, day_end * 24)
        dict_plot['Battery power (kW)'] = batt_power[day_start*24:day_end*24]
        dict_plot['Market rate ($/MWh)'] = sell_rate[day_start*24:day_end*24]



        #sns.set(style="darkgrid")
        fig, ax1 = plt.subplots()

        ax1.plot(dict_plot['Time (hour of year)'], dict_plot['Battery power (kW)'], color='b', label='Battery power')
        ax2 = ax1.twinx()
        ax2.plot(dict_plot['Time (hour of year)'], dict_plot['Market rate ($/MWh)'], color='g', label='Market rate')
        ax1.set_xlabel('Hour of year')
        ax1.set_ylabel('Battery Power (kW)')
        ax2.set_ylabel('Sell Rate ($/MWh)')
        h0, l0 = ax1.get_legend_handles_labels()
        h1, l1 = ax2.get_legend_handles_labels()
        plt.legend(h0 + h1, l0 + l1, loc=2)
        plt.show()


def test_storage_sizing():

    batt_kw_desired = 30000 # 30 MW
    batt_kwh_desired = 120000 # 120 MWh

    technologies = ['Solar', 'Generic', 'Battery']
    systems = get_system_behavior_fx(technologies)  # defines which models get run in each system
    defaults, site = get_default(technologies)
    site['lat'] = 33.450495
    site['lon'] = -111.983688
    site['elev'] = 358
    site['tz'] = -7
    site['year'] = '2012'
    defaults = update_site_default(defaults, site)
    defaults['Battery']['StandAloneBattery']['Battery']['en_batt'] = 1

    # size the battery
    defaults = storage.size_storage(defaults, batt_kw_desired, batt_kwh_desired)

    assert round(defaults['Battery']['StandAloneBattery']['Battery']['batt_computed_strings']) == 106581
    assert round(defaults['Battery']['StandAloneBattery']['Battery']['batt_computed_series']) == 139
    assert round(defaults['Battery']['StandAloneBattery']['Battery']['batt_computed_bank_capacity']) == 120000


model = Battery.default("BatteryNone")
model.System.gen = [2] * 8760
model.Battery.en_batt = 1

for size in (500, 1000, 1500, 2000):
    battery_model_sizing(model, size * 0.5, size, 500)
    model.execute(0)
    print(size, model.Battery.batt_computed_bank_capacity, model.Outputs.batt_bank_installed_capacity)



